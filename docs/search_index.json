[["index.html", "Python for Data Analyst 2023 Lời nói đầu", " Python for Data Analyst 2023 Lê Huỳnh Đức 2024-01-04 Lời nói đầu "],["giơi-thiêu-python-va-cac-công-cu-hô-trơ.html", "Chương 1 Giới thiệu Python và các công cụ hỗ trợ", " Chương 1 Giới thiệu Python và các công cụ hỗ trợ "],["lập-trình-với-ngôn-ngữ-python.html", "Chương 2 Lập trình với ngôn ngữ Python 2.1 Nội dung chương 2.2 Khai báo biến 2.3 Bài tập", " Chương 2 Lập trình với ngôn ngữ Python 2.1 Nội dung chương Khai báo biến Các kiểu dữ liệu cơ bản: float, int, str, bool​ Chuyển đổi dữ liệu​ Cấu trúc dữ liệu cơ bản: List, set, tuple, dictionary​ Toán tử số học, toán tử so sánh, toán tử logic​ Các phương thức trên string​ Các phương thức cho dữ liệu Datetime​ Câu lệnh có điều kiện​ Vòng lặp trong python​ Function​ Comment trong python 2.2 Khai báo biến 2.2.1 Biến là gì Biến là vị trí bộ nhớ được dành riêng để lưu trữ dữ liệu. Một khi biến đã được lưu trữ, nghĩa là một khoảng không gian đã được cấp phát trong bộ nhớ đó. Dựa trên kiểu dữ liệu của một biến, trình thông dịch cấp phát bộ nhớ và quyết định những gì có thể được lưu trữ trong khu nhớ dành riêng đó. Vì thế, bằng việc gán các dữ liệu khác nhau cho các biến, bạn có thể lưu trữ số nguyên, văn bản, số thập phân cho biến Để khai báo biến trong Python, ta dùng cú pháp​ tenbien = giá trị name = &quot;Phạm Xuân Bách&quot; Để in giá trị của biến ra màn hình, ta dùng cú pháp print(tenbien) print(name) Phạm Xuân Bách 2.2.2 Tại sao phải cần khai báo biến Hãy tưởng tượng như sau, bạn có một số dữ liệu là những con số với nhiều chữ số và các thao tác tính toán 52348252408 + 523482034 52871734442 52348252408 + 12312454534534 12364802786942 523482034 + 12312454534534 12312978016568 Một điều mà các bạn dễ dàng nhận ra đó là những con số với nhiều chữ số gây khó khăn trong việc sử dụng vì chúng có quá nhiều chữ số, đôi lúc chúng ta cũng có thể vô tình gây sai lệnh giá trị. Vì vậy, việc tạo một biến giúp ta quản lý những giá trị này dễ dàng hơn a = 52348252408 b = 523482034 c = 12312454534534 Ví dụ khi tính cộng a và b a + b 52871734442 a + c 12364802786942 2.2.3 Các quy tắc khi đặt biến trong Python Tên của biến phải được bắt đầu bằng một chữ hoặc một ký tự underscore (dấu gạch dưới: _). Tên của biến không thể bắt đầu bằng một con số. Ngoài ký tự bắt đầu ra thì trong tên biến có thể sử dụng số, chữ và dấu gạch dưới như bình thường. Biến trong Python phải có tên riêng, không trùng lặp với tên của các biến đang tồn tại trên file làm việc của bạn. Tên biến của phân biệt chữ hoa và chữ thường như chúng mình đã đề cập trong bài viết về các lưu ý quan trọng cho người mới học Python. Ví dụ Đặt tên có dấu gạch dưới ở đầu _name = &quot;Phạm Xuân Bách&quot; Khi đặt tên biến có số ở đầu, Python sẽ báo lỗi SyntaxError, lỗi SyntaxError sẽ báo cho chúng ta biết chúng ta đang vi phạm về lỗi cú pháp 1name = &quot;Phạm Xuân Bách&quot; Cell In[10], line 1 1name = &quot;Phạm Xuân Bách&quot; ^ SyntaxError: invalid decimal literal Chúng ta có thể đặt số trong biến ở bất kì đâu ngoại trừ ký tự bắt đầu name1 = &quot;Phạm Xuân Bách&quot; Nếu khai báo với tên trùng biến cũ thì giá trị sẽ bị đè lên ví dụ khi khai báo name1 = \"Phạm Xuân Bách\", khi ta khai báo name1 = Phạm Đình Đức, lúc này giá trị sẽ đè lên giá trị cũ name1 = &quot;Phạm Đình Đức&quot; print(name1) Phạm Đình Đức 2.3 Bài tập 2.3.1 UCLN Viết hàm tìm Ước chung lớn nhất của hai số nguyên dương a, b def findUCLN(a, b): .. .. return __ Test case: Ví dụ Kết quả findUCLN(50, 20) 10 findUCLN(60, 520) 20 Lưu ý: không sử dụng hàm cho sẵn math.gcd(a, b) Lời giải import math def findUCLN(a, b): return math.gcd(a, b) 2.3.2 BCNN Viết hàm tìm Bội chung nhỏ nhất của hai số nguyên dương a, b def findBCNN(a, b): .. .. return __ Test case: Ví dụ Kết quả findBCNN(8, 6) 24 findBCNN(30, 520) 1560 Lưu ý: không sử dụng hàm cho sẵn math.lcm(a, b) Lời giải def findBCNN(a, b): answer = a * b // findUCLN(a, b) return answer 2.3.3 GIAI_THUA Viết hàm tìm Giai thừa của một số n theo công thức \\(n! = 1 \\times 2 \\times 3 \\times .. \\times (n-1) \\times n\\) def findGT(n): ... return _ Test case: Ví dụ Kết quả findGT(5) 120 findGT(7) 5040 Lưu ý: không sử dụng hàm cho sẵn math.factorial(n) Lời giải def findGT(n): answer = 1 for i in range(1, n+1): answer *= i return answer 2.3.4 CHIA_CHO_5 Mô tả Viết hàm tìm tất cả các số chia hết cho 5 nhưng không chia hết cho 15 nằm trong đoạn từ [a, b]. Kết quả trả về là một danh sách def find(a, b): for i in range(__, __): if __: .. .. .. return _ Test case Ví dụ Kết quả find(1, 40) [5, 10, 20, 25, 35, 40] find(10, 100) [10, 20, 25, 35, 40, 50, 55, 65, 70, 80, 85, 95, 100] Lời giải def find(a, b): answer = [] for i in range(a, b + 1): if (i % 5 == 0) &amp; (i % 3 != 0): answer.append(i) return answer 2.3.5 PARSE_STRING_01 Mô tả Viết một hàm nhận đầu vào là một danh sách các số nguyên dưới dạng chuỗi và đầu ra là một danh sách def parseString(l): .. .. return Test case Ví dụ Kết quả parseString(\"[1, 2, 3, 4, 5]\") [1, 2, 3, 4, 5] parseString(\"[-1, -2]\") [-1, -2] parseString(\"[0]\") [0] Lời giải def parseString(l): items = l.split(&#39;,&#39;) answer = [] for i in range(len(items)): item = items[i].replace(&#39;[&#39;,&#39;&#39;).replace(&#39;]&#39;,&#39;&#39;).strip() item = int(item) answer.append(item) return answer "],["lập-trình-với-ngôn-ngữ-python-1.html", "Chương 3 Lập trình với ngôn ngữ Python 3.1 Nội dung chương 3.2 Khai báo biến 3.3 Bài tập", " Chương 3 Lập trình với ngôn ngữ Python 3.1 Nội dung chương Khai báo biến Các kiểu dữ liệu cơ bản: float, int, str, bool​ Chuyển đổi dữ liệu​ Cấu trúc dữ liệu cơ bản: List, set, tuple, dictionary​ Toán tử số học, toán tử so sánh, toán tử logic​ Các phương thức trên string​ Các phương thức cho dữ liệu Datetime​ Câu lệnh có điều kiện​ Vòng lặp trong python​ Function​ Comment trong python 3.2 Khai báo biến 3.2.1 Biến là gì Biến là vị trí bộ nhớ được dành riêng để lưu trữ dữ liệu. Một khi biến đã được lưu trữ, nghĩa là một khoảng không gian đã được cấp phát trong bộ nhớ đó. Dựa trên kiểu dữ liệu của một biến, trình thông dịch cấp phát bộ nhớ và quyết định những gì có thể được lưu trữ trong khu nhớ dành riêng đó. Vì thế, bằng việc gán các dữ liệu khác nhau cho các biến, bạn có thể lưu trữ số nguyên, văn bản, số thập phân cho biến Để khai báo biến trong Python, ta dùng cú pháp​ tenbien = giá trị name = &quot;Phạm Xuân Bách&quot; Để in giá trị của biến ra màn hình, ta dùng cú pháp print(tenbien) print(name) Phạm Xuân Bách 3.2.2 Tại sao phải cần khai báo biến Hãy tưởng tượng như sau, bạn có một số dữ liệu là những con số với nhiều chữ số và các thao tác tính toán 52348252408 + 523482034 52871734442 52348252408 + 12312454534534 12364802786942 523482034 + 12312454534534 12312978016568 Một điều mà các bạn dễ dàng nhận ra đó là những con số với nhiều chữ số gây khó khăn trong việc sử dụng vì chúng có quá nhiều chữ số, đôi lúc chúng ta cũng có thể vô tình gây sai lệnh giá trị. Vì vậy, việc tạo một biến giúp ta quản lý những giá trị này dễ dàng hơn a = 52348252408 b = 523482034 c = 12312454534534 Ví dụ khi tính cộng a và b a + b 52871734442 a + c 12364802786942 3.2.3 Các quy tắc khi đặt biến trong Python Tên của biến phải được bắt đầu bằng một chữ hoặc một ký tự underscore (dấu gạch dưới: _). Tên của biến không thể bắt đầu bằng một con số. Ngoài ký tự bắt đầu ra thì trong tên biến có thể sử dụng số, chữ và dấu gạch dưới như bình thường. Biến trong Python phải có tên riêng, không trùng lặp với tên của các biến đang tồn tại trên file làm việc của bạn. Tên biến của phân biệt chữ hoa và chữ thường như chúng mình đã đề cập trong bài viết về các lưu ý quan trọng cho người mới học Python. Ví dụ Đặt tên có dấu gạch dưới ở đầu _name = &quot;Phạm Xuân Bách&quot; Khi đặt tên biến có số ở đầu, Python sẽ báo lỗi SyntaxError, lỗi SyntaxError sẽ báo cho chúng ta biết chúng ta đang vi phạm về lỗi cú pháp 1name = &quot;Phạm Xuân Bách&quot; Cell In[10], line 1 1name = &quot;Phạm Xuân Bách&quot; ^ SyntaxError: invalid decimal literal Chúng ta có thể đặt số trong biến ở bất kì đâu ngoại trừ ký tự bắt đầu name1 = &quot;Phạm Xuân Bách&quot; Nếu khai báo với tên trùng biến cũ thì giá trị sẽ bị đè lên ví dụ khi khai báo name1 = \"Phạm Xuân Bách\", khi ta khai báo name1 = Phạm Đình Đức, lúc này giá trị sẽ đè lên giá trị cũ name1 = &quot;Phạm Đình Đức&quot; print(name1) Phạm Đình Đức 3.3 Bài tập 3.3.1 UCLN Viết hàm tìm Ước chung lớn nhất của hai số nguyên dương a, b def findUCLN(a, b): .. .. return __ Test case: Ví dụ Kết quả findUCLN(50, 20) 10 findUCLN(60, 520) 20 Lưu ý: không sử dụng hàm cho sẵn math.gcd(a, b) Lời giải import math def findUCLN(a, b): return math.gcd(a, b) 3.3.2 BCNN Viết hàm tìm Bội chung nhỏ nhất của hai số nguyên dương a, b def findBCNN(a, b): .. .. return __ Test case: Ví dụ Kết quả findBCNN(8, 6) 24 findBCNN(30, 520) 1560 Lưu ý: không sử dụng hàm cho sẵn math.lcm(a, b) Lời giải def findBCNN(a, b): answer = a * b // findUCLN(a, b) return answer 3.3.3 GIAI_THUA Viết hàm tìm Giai thừa của một số n theo công thức \\(n! = 1 \\times 2 \\times 3 \\times .. \\times (n-1) \\times n\\) def findGT(n): ... return _ Test case: Ví dụ Kết quả findGT(5) 120 findGT(7) 5040 Lưu ý: không sử dụng hàm cho sẵn math.factorial(n) Lời giải def findGT(n): answer = 1 for i in range(1, n+1): answer *= i return answer 3.3.4 CHIA_CHO_5 Mô tả Viết hàm tìm tất cả các số chia hết cho 5 nhưng không chia hết cho 15 nằm trong đoạn từ [a, b]. Kết quả trả về là một danh sách def find(a, b): for i in range(__, __): if __: .. .. .. return _ Test case Ví dụ Kết quả find(1, 40) [5, 10, 20, 25, 35, 40] find(10, 100) [10, 20, 25, 35, 40, 50, 55, 65, 70, 80, 85, 95, 100] Lời giải def find(a, b): answer = [] for i in range(a, b + 1): if (i % 5 == 0) &amp; (i % 3 != 0): answer.append(i) return answer 3.3.5 PARSE_STRING_01 Mô tả Viết một hàm nhận đầu vào là một danh sách các số nguyên dưới dạng chuỗi và đầu ra là một danh sách def parseString(l): .. .. return Test case Ví dụ Kết quả parseString(\"[1, 2, 3, 4, 5]\") [1, 2, 3, 4, 5] parseString(\"[-1, -2]\") [-1, -2] parseString(\"[0]\") [0] Lời giải def parseString(l): items = l.split(&#39;,&#39;) answer = [] for i in range(len(items)): item = items[i].replace(&#39;[&#39;,&#39;&#39;).replace(&#39;]&#39;,&#39;&#39;).strip() item = int(item) answer.append(item) return answer "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
