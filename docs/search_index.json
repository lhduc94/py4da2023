[["index.html", "Python for Data Analyst 2023 Lời nói đầu", " Python for Data Analyst 2023 Lê Huỳnh Đức 2024-01-05 Lời nói đầu "],["giơi-thiêu-python-va-cac-công-cu-hô-trơ.html", "Chương 1 Giới thiệu Python và các công cụ hỗ trợ", " Chương 1 Giới thiệu Python và các công cụ hỗ trợ "],["lập-trình-với-ngôn-ngữ-python.html", "Chương 2 Lập trình với ngôn ngữ Python 2.1 Khai báo biến 2.2 Kiểu dữ liệu 2.3 Các toán tử trong Python 2.4 Ôn tập 2.5 Bài tập", " Chương 2 Lập trình với ngôn ngữ Python Khai báo biến Các kiểu dữ liệu cơ bản: float, int, str, bool​ Chuyển đổi dữ liệu​ Cấu trúc dữ liệu cơ bản: List, set, tuple, dictionary​ Toán tử số học, toán tử so sánh, toán tử logic​ Các phương thức trên string​ Các phương thức cho dữ liệu Datetime​ Câu lệnh có điều kiện​ Vòng lặp trong python​ Function​ Comment trong python 2.1 Khai báo biến 2.1.1 Biến là gì Biến là vị trí bộ nhớ được dành riêng để lưu trữ dữ liệu. Một khi biến đã được lưu trữ, nghĩa là một khoảng không gian đã được cấp phát trong bộ nhớ đó. Dựa trên kiểu dữ liệu của một biến, trình thông dịch cấp phát bộ nhớ và quyết định những gì có thể được lưu trữ trong khu nhớ dành riêng đó. Vì thế, bằng việc gán các dữ liệu khác nhau cho các biến, bạn có thể lưu trữ số nguyên, văn bản, số thập phân cho biến Để khai báo biến trong Python, ta dùng cú pháp​ tenbien = giá trị name = &quot;Phạm Xuân Bách&quot; Để in giá trị của biến ra màn hình, ta dùng cú pháp print(tenbien) print(name) Phạm Xuân Bách 2.1.2 Tại sao phải cần khai báo biến Hãy tưởng tượng như sau, bạn có một số dữ liệu là những con số với nhiều chữ số và các thao tác tính toán 52348252408 + 523482034 52871734442 52348252408 + 12312454534534 12364802786942 523482034 + 12312454534534 12312978016568 Một điều mà các bạn dễ dàng nhận ra đó là những con số với nhiều chữ số gây khó khăn trong việc sử dụng vì chúng có quá nhiều chữ số, đôi lúc chúng ta cũng có thể vô tình gây sai lệnh giá trị. Vì vậy, việc tạo một biến giúp ta quản lý những giá trị này dễ dàng hơn a = 52348252408 b = 523482034 c = 12312454534534 Ví dụ khi tính cộng a và b a + b 52871734442 a + c 12364802786942 2.1.3 Các quy tắc khi đặt biến trong Python Tên của biến phải được bắt đầu bằng một chữ hoặc một ký tự underscore (dấu gạch dưới: _). Tên của biến không thể bắt đầu bằng một con số. Ngoài ký tự bắt đầu ra thì trong tên biến có thể sử dụng số, chữ và dấu gạch dưới như bình thường. Biến trong Python phải có tên riêng, không trùng lặp với tên của các biến đang tồn tại trên file làm việc của bạn. Tên biến của phân biệt chữ hoa và chữ thường như chúng mình đã đề cập trong bài viết về các lưu ý quan trọng cho người mới học Python. Ví dụ Đặt tên có dấu gạch dưới ở đầu _name = &quot;Phạm Xuân Bách&quot; Khi đặt tên biến có số ở đầu, Python sẽ báo lỗi SyntaxError, lỗi SyntaxError sẽ báo cho chúng ta biết chúng ta đang vi phạm về lỗi cú pháp 1name = &quot;Phạm Xuân Bách&quot; Cell In[10], line 1 1name = &quot;Phạm Xuân Bách&quot; ^ SyntaxError: invalid decimal literal Chúng ta có thể đặt số trong biến ở bất kì đâu ngoại trừ ký tự bắt đầu name1 = &quot;Phạm Xuân Bách&quot; Nếu khai báo với tên trùng biến cũ thì giá trị sẽ bị đè lên ví dụ khi khai báo name1 = \"Phạm Xuân Bách\", khi ta khai báo name1 = Phạm Đình Đức, lúc này giá trị sẽ đè lên giá trị cũ name1 = &quot;Phạm Đình Đức&quot; print(name1) Phạm Đình Đức Ví dụ khai báo với biến viết thường name1 và viết hoa NAME1 thì Python sẽ hiểu là hai biến khác nhau. name1 = &quot;Phạm Đình Đức&quot; NAME1 = &quot;Phạm Xuân Bách&quot; print(NAME1) print(name1) Phạm Xuân Bách Phạm Đình Đức 2.1.4 Các cách khai báo biến trong Python Khai báo mỗi giá trị mỗi dòng a = 1 b = 2 c = 3 Khai báo các biến cùng 1 giá trị, thay vì khai báo a = 2000 b = 2000 c = 2000 Ta có thể khai báo a = b = c = 2000 Khai báo nhiều biến khác nhau, khác giá trị trên cùng một hàng name, age, isMale = &quot;Phạm Xuân Bách&quot;, 23, True Khai báo giá trị biến này bằng một biến khác a = 2000 b = a 2.1.5 In dữ liệu​ Để in dữ liệu ra màn hình, ta có thể dùng lệnh print​() print(&quot;Phạm Xuân Bách&quot;) Phạm Xuân Bách Có thể in nhiều giá trị cùng lúc bằng print() với các giá trị cách nhau bằng dấu ,​ a = 22 print(&quot;Phạm Xuân Bách năm nay&quot;, a, &quot;tuổi&quot;) Phạm Xuân Bách năm nay 22 tuổi 2.2 Kiểu dữ liệu Kiểu dữ liệu là một khái niệm rất quan trọng trong lập trình. Các biến có thể lưu trữ các loại dữ liệu khác nhau và mỗi loại khác nhau có thể làm những việc khác nhau. Đối với Python, ngôn ngữ lập trình có các kiểu dữ liệu sau được tích hợp sẵn theo mặc định, cụ thể như sau: Text Type: str Numeric Types: int, float, complex Boolean Type: bool Binary Types: bytes Bằng việc sử dụng hàm type() , bạn có thể lấy bất kỳ kiểu dữ liệu nào của các đối tượng. Ví dụ: x = 5 print(type(x)) &lt;class &#39;int&#39;&gt; 2.2.1 Các kiểu dữ liệu số (numeric) trong Python Python hỗ trợ các kiểu dữ liệu số Integer (số nguyên), Float (số thực) và Complex (số phức). Python định nghĩa các lớp là int, float và complex để lưu trữ và thao tác các kiểu dữ liệu số. Integer (số nguyên): viết tắt là int, là các số nguyên dương hoặc âm (không có phần phân số). Trong Python, số nguyên không có giới hạn độ dài. Ví dụ x = 1 y = 10 z = -10 Float (số thực): biểu diễn bởi lớp float. Lớp này đại diện cho các số thực sử dụng dấu phẩy động (15 chữ số chính xác sau dấu thập phân). Các số thực có thể được biểu diễn bằng các ký hiệu e hoặc E, ký hiệu khoa học cho a10b x = 3.14 print(x) y = 3E4 print(y) print(type(y)) 3.14 30000.0 &lt;class &#39;float&#39;&gt; Complex (số phức): biểu diễn bởi lớp phức. Một số phức được viết dưới dạng x + yj. trong đó x, y là phần thực và j là phần ảo. x = 3 + 5j y = 5j print(x) print(x+y) (3+5j) (3+10j) Python thường làm việc với số trong cơ số 10. Để làm việc với cơ số khác ta sử dụng các tiền tố sau Hệ nhị phân : ‘0b’ hoặc ‘0B’ Hệ bát phân : ‘0o’ hoặc ‘0O’ Hệ thập lục phân ‘0x’ hoặc ‘0X’ a = &#39;Ob10101&#39; print(a) Ob10101 2.2.2 Kiểu dữ liệu chuỗi ký tự (string) trong Python Các kiểu dữ liệu chuỗi trong Python được đặt trong dấu ngoặc kép đơn hoặc ngoặc kép. Python sẽ coi các lệnh trích dẫn đơn và kép như nhau, ví dụ như \"Hello\" tương đương với 'Hello' Gán chuỗi cho một biến name = &quot;Phạm Xuân Bách&quot; print(name) Phạm Xuân Bách Chúng ta có thể khai báo chuỗi bằng nhiều dòng khác nhau, dùng ba dấu nháy kép hoặc ba dấu nháy đơn str1 = &quot;&quot;&quot;Hôm nay trời nắng chang chang mèo con đi học chẳng mang thứ gì chỉ mang một chiếc bút chì. Và mang một mẩu bánh mì con con &quot;&quot;&quot; print(str1) Hôm nay trời nắng chang chang mèo con đi học chẳng mang thứ gì chỉ mang một chiếc bút chì. Và mang một mẩu bánh mì con con str2 = &#39;&#39;&#39;Hôm nay trời nắng chang chang mèo con đi học chẳng mang thứ gì chỉ mang một chiếc bút chì. Và mang một mẩu bánh mì con con &#39;&#39;&#39; print(str2) Hôm nay trời nắng chang chang mèo con đi học chẳng mang thứ gì chỉ mang một chiếc bút chì. Và mang một mẩu bánh mì con con Chúng ta cũng có thể nhập chuỗi với các giá trị xuống dòng bằng kí tự \\n str3 = &quot;Ví Dụ xuống dòng \\nXuống dòng 2&quot; print(str3) Ví Dụ xuống dòng Xuống dòng 2 Hoặc chỉ định khoảng cách tab bằng \\t str4 = &quot;Ví Dụ tab \\t phần 1 \\t phần 2&quot; print(str4) Ví Dụ tab phần 1 phần 2 2.2.3 Kiểu dữ liệu Boolean Kiểu dữ liệu Boolean là kiểu dữ liệu chứa một trong hai giá trị - True - có nghĩa là đúng - False - có nghĩa là sai Ví dụ is_male = True print(is_male) print(type(is_male)) True &lt;class &#39;bool&#39;&gt; 2.2.4 Ép kiểu dữ liệu Đôi khi chúng ta muốn chuyển đổi kiểu cho biến, chúng ta có thể áp dụng phương pháp ép kiểu trong Python. Để ép kiểu dữ liệu từ kiểu này sang kiểu khác, ta dùng hàm khởi tạo của python int(): Chuyển đổi một số float sang số nguyên, chuỗi kí tự chứa các kí tự số sang số nguyên float(): Chuyển số int sang số thập phân, chuỗi kí tự chưa các kí tự số sang số thập phân str(): Chuyển các kiểu dữ liệu như số nguyên, số thập phân sang chuỗi Ví dụ vì vấn đề nhập liệu, mặc dù gần như toàn bộ cột dữ liệu có giá trị float như 1.2, 1.3, nhưng người nhập liệu nhập sai dấu . thành dấu ,(ví dụ 1.2 bị nhập thành 1,2) nên cột đó được nhận diện là string. Chúng ta sẽ xử lý string từ 1,2 sang 1.2 bằng phương thức .replace() sẽ được đề cập sau. Sau khi xử lý xong, chúng ta sẽ ép kiểu về float. 2.2.4.1 Ép kiểu sang int Khi chuyển float sang int, kết quả trả về là phần nguyên của số đó. Ví dụ Ép kiểu số dương a = int(2.0) print(a) 2 a = int(2.5) print(a) 2 Ép kiểu số âm a = int(-0.5) print(a) Chuyển từ str sang int a = &quot;2&quot; print(int(a)) 2 a = &quot;-2&quot; print(int(a)) -2 Lưu ý khi chuỗi tương ứng với float thì ép kiểu int sẽ báo lỗi a = &quot;2.5&quot; print(int(a)) --------------------------------------------------------------------------- ValueError Traceback (most recent call last) Cell In[40], line 2 1 a = &quot;2.5&quot; ----&gt; 2 print(int(a)) ValueError: invalid literal for int() with base 10: &#39;2.5&#39; Ép dữ liệu từ nhị phân sang int, lúc này ở hàm khởi tạo, chúng ta thêm tham số cơ số vào. # nhị phân a = b&#39;10101&#39; print(int(a,2)) 21 a = &#39;0B1010&#39; print(int(a,2)) 10 # bát phân a = b&#39;0o1012&#39; print(int(a,8)) 522 #thập lục phân a = &#39;0x4A5E&#39; print(int(a,16)) 19038 2.2.4.2 Ép kiểu sang float Ép kiểu int sang float a = 2 print(float(a)) 2.0 Ép kiểu string sang float a = &quot;2.34&quot; print(float(a)) 2.34 a = &quot;2.0&quot; print(float(a)) 2.0 a = &quot;2&quot; print(float(a)) 2.0 2.2.4.3 Ép kiểu sang string ép kiểu int sang str a = 2 print(str(2)) 2 a = 2.5 print(str(a)) 2.5 2.3 Các toán tử trong Python Toán tử là các biểu tượng cụ thể mà thực hiện một số hoạt động trên một số giá trị và cho ra một kết quả. Có các loại toán tử chính: Toán tử số học Toán tử quan hệ Toán tử logic Toán tử gán Toán tử membership Toán tử identify Toán tử thao tác bit 2.3.1 Toán tử số học 2.3.1.1 Toán tử + Cộng hai số nguyên, kết quả trả về là một số nguyên a, b = 12, 5 c = a + b print(c) print(type(c)) 17 &lt;class &#39;int&#39;&gt; 2.4 Ôn tập 2.4.1 Khai báo biến Khai báo một biến tuoi với giá trị là 25 In (print) ra biến tuoi Khai báo biến can_nang, chieu_cao, quoc_tich lần lượt là 50, 170, \"vietnam\" trong 1 dòng Sử dụng các biến trên, in ra câu sau \"Tôi có cân nặng là 50, chiều cao là 170 và quốc tịch vietnam\" Khai báo biến bai_tho với giá trị là bài thơ sau và in (print) biến sao cho mỗi câu thơ ở một dòng như dưới đây Mơ khách đường xa, khách đường xa Áo em trắng quá nhìn không ra… Ở đây sương khói mờ nhân ảnh Ai biết tình ai có đậm đà? Lời giải #1 tuoi = 25 #2 print(tuoi) #3 can_nang, chieu_cao, quoc_tich = 50, 170, &#39;vietnam&#39; #4 print(&#39;Tôi có cân nặng là&#39;, can_nang, &#39;, chiều cao là&#39;, chieu_cao, &#39;và quốc tịch&#39;, quoc_tich) #5 bai_tho = &#39;&#39;&#39; Mơ khách đường xa, khách đường xa Áo em trắng quá nhìn không ra... Ở đây sương khói mờ nhân ảnh Ai biết tình ai có đậm đà? &#39;&#39;&#39; print(bai_tho) 2.4.2 Kiểu và ép kiểu dữ liệu Kiểm tra kiểu dữ liệu của biến is_number, number, float_number, string_number và in (print) biến Ép kiểu biến number từ int sang float và in (print) biến Ép kiểu biến float_number từ float sang int và in (print) biến Ép kiểu biến string_number từ str sang int và in (print) biến is_number = True __ number = 10 __ float_number = 15.5 __ string_number = &quot;25&quot; Lời giải is_number = True print(&#39;Biến is_number có kiểu&#39;, type(is_number)) # Ép kiểu từ int sang float và ngược lại number = 10 print(&#39;Số nguyên:&#39;, number, &#39;với kiểu&#39;, type(number)) number_float = float(number) print(&quot;Số nguyên sau khi ép kiểu thành số thực:&quot;, number_float, &#39;với kiểu&#39;, type(number_float)) float_number = 15.5 print(&#39;Số thực&#39;, float_number) int_number = int(float_number) print(&quot;Số thực sau khi ép kiểu thành số nguyên:&quot;, int_number, &#39;với kiểu&#39;, type(int_number)) # Ép kiểu từ string sang int string_number = &quot;25&quot; print(&#39;Chuỗi&#39;, float_number, &#39;với kiểu&#39;, type(string_number)) int_from_string = int(string_number) print(&quot;Số nguyên từ chuỗi:&quot;, int_from_string, &#39;với kiểu&#39;, type(int_from_string)) 2.4.3 Toán tử Với 2 biến a và b, thực hiện các phép toán sau và in ra kết quả Chia lấy phần nguyên Chia lấy phần dư Lũy thừa (mũ) So sánh 2 số có bằng nhau không a có khác b không a có lớn hơn b không Cộng 3vào giá trị biến a sử dụng toán tử += và in ra kết quả. Trừ 1 vào giá trị biến a sử dụng toán tử -= và in ra kết quả. Với 2 biến x và y, sử dụng toán tử or, and, not và in ra kết quả tương ứng a = 5 b = 3 # Chia lấy phần nguyên floor_division = __ print(&quot;Phần nguyên của a chia b là:&quot;, floor_division) # Chia lấy phần dư remainder = __ print(&quot;Phần dư của a chia b là:&quot;, remainder) # Lũy thừa power_result = __ print(&quot;Lũy thừa của a mũ b là:&quot;, power_result) # So sánh bằng result = __ print(&quot;a bằng b:&quot;, result) # So sánh khác nhau result = __ print(&quot;a khác b:&quot;, result) # So sánh lớn hơn result = __ print(&quot;a lớn hơn b:&quot;, result) # Gán và cộng += __ print(&quot;a sau khi thêm 3:&quot;, a) # Gán và trừ +- __ print(&quot;a sau khi trừ 4:&quot;, a) x = True y = False # Toán tử AND result = __ and __ print(&quot;Kết quả của x AND y là:&quot;, result) # Toán tử OR result = __ or __ print(&quot;Kết quả của x OR y là:&quot;, result) # Toán tử NOT result = not print(&quot;Kết quả của NOT x là:&quot;, result) Lời giải a = 5 b = 3 # Chia lấy phần nguyên floor_division = a // b print(&quot;Phần nguyên của a chia b là:&quot;, floor_division) # Chia lấy phần dư remainder = a % b print(&quot;Phần dư của a chia b là:&quot;, remainder) # Lũy thừa power_result = a ** b print(&quot;Lũy thừa của a mũ b là:&quot;, power_result) # So sánh bằng result = a == b print(&quot;a bằng b:&quot;, result) # So sánh khác nhau result = a != b print(&quot;a khác b:&quot;, result) # So sánh lớn hơn result = a &gt; b print(&quot;a lớn hơn b:&quot;, result) # Gán và cộng += a += 3 # Tương đương với a = a + 3 print(&quot;a sau khi thêm 3:&quot;, a) # Gán và trừ +- a -= 4 # Tương đương với a = a - 4 print(&quot;a sau khi trừ 4:&quot;, a) x = True y = False # Toán tử AND result = x and y print(&quot;Kết quả của x AND y là:&quot;, result) # Toán tử OR result = x or y print(&quot;Kết quả của x OR y là:&quot;, result) # Toán tử NOT result = not x print(&quot;Kết quả của NOT x là:&quot;, result) Khởi tạo 2 biến num1 và num2 với 2 giá trị số nguyên (int) bất kì Tính tổng và tích giá trị của 2 biến num1 và num2 Kiểm tra xem giá tổng và tích của 2 biến có chia hết cho 3 và 5 hay không #Khởi tạo 2 biến num1 và num2 #Tính tổng sum_result = #Tính tích product_result = print(f&quot;Tổng là: {sum_result}, Tích là: {product_result}&quot;) # Kiểm tra xem tổng và tích vừa tính có chia hết cho 3 và 5 Lời giải # Bài 19 num1 = 3 num2 = 4 sum_result = num1 + num2 product_result = num1 * num2 print(f&quot;Tổng là: {sum_result}, Tích là: {product_result}&quot;) # Bài 20 check_number = sum_result is_divisible = (check_number % 3 == 0) and (check_number % 5 == 0) print(f&quot;Số {check_number} {&#39;chia hết cho 3 và 5&#39; if is_divisible else &#39;không chia hết cho 3 và 5&#39;}&quot;) Giả sử tỷ giá 1 usd đổi được 24 vnd Viết chương trình với input là số usd nhập vào từ bàn phím output là số vnd tương ứng Sử dụng input() để giá trị nhập từ bàn phím a = input() khi chạy câu này, a sẽ được gán với giá trị được nhập vào từ bàn phím a = input() print(type(a)) Hãy thử nhập từ bàn phím số tiền USD và đổi sang VND USD = int(input(&quot;Input USD:&quot;)) VND = __ * __ print(__, &quot;USD = &quot;, __, &quot;VND&quot;) Lời giải USD = int(input(&quot;Input USD: &quot;)) VND = USD*24 print(USD, &quot;USD = &quot;, VND, &quot;VND&quot;) 2.4.4 Cấu trúc dữ liệu cơ bản 2.4.4.1 List cho List my_list Truy cập phần tử đầu tiên Truy cập phần tử cuối cùng Lấy ra list [2,3,4] từ my_list Lấy ra những phần tử có index 0 và chẵn: 0, 2, 4 my_list = [1, 2, 3, 4, 5] # Truy cập phần tử đầu tiên first_element = print(&quot;Phần tử đầu tiên của list là:&quot;, first_element) # Truy cập phần tử cuối cùng last_element = print(&quot;Phần tử cuối cùng của list là:&quot;, last_element) # Truy cập một phần của list sliced_elements = # Lấy ra list [2,3,4] từ my_list print(&quot;sliced list:&quot;, sliced_elements) #Lấy phần tử index chẵn new_list = print(&quot;new list:&quot; new_list) Lời giải my_list = [1, 2, 3, 4, 5] # Truy cập phần tử đầu tiên first_element = my_list[0] print(&quot;Phần tử đầu tiên của list là:&quot;, first_element) # Truy cập phần tử cuối cùng last_element = my_list[-1] print(&quot;Phần tử cuối cùng của list là:&quot;, last_element) # Truy cập một phần của list sliced_elements = my_list[1:4] # Lấy ra list [2,3,4] từ my_list print(&quot;sliced list:&quot;, sliced_elements) #Lấy phần tử index chẵn new_list = my_list[::2] print(&quot;new list:&quot;, new_list) Thay đổi giá trị của phần 3 thành 10 Kiểm tra xem giá trị 3 có tồn tại trong list không my_list = [1, 2, 3, 4, 5] # Thay đổi giá trị của phần tử tại index 2 __ print(&quot;List sau khi thay đổi giá trị của phần tử tại index 2:&quot;, my_list) # Kiểm tra xem giá trị 3 có tồn tại trong list không print(&quot;Giá trị 3 có tồn tại trong list không:&quot;, ____) Lời giải my_list = [1, 2, 3, 4, 5] # Thay đổi giá trị của phần tử tại index 2 my_list[2] = 10 print(&quot;List sau khi thay đổi giá trị của phần tử tại index 2:&quot;, my_list) # Kiểm tra xem giá trị 3 có tồn tại trong list không print(&quot;Giá trị 3 có tồn tại trong list không:&quot;, 3 in my_list) Thêm một phần tử vào cuối list Xóa phần tử tại index=2 Nối list2 vào list1 my_list = [1, 2, 3, 4, 5] # Thêm một phần tử vào cuối list __ print(&quot;List sau khi thêm phần tử mới:&quot;, my_list) # Xóa phần tử tại index 2 __ print(&quot;List sau khi xóa phần tử tại index 2:&quot;, my_list) list1 = [1, 2, 3] list2 = [4, 5, 6] # Nối list2 vào list1 __ print(&quot;List sau khi nối:&quot;, list1) Lời giải my_list = [1, 2, 3, 4, 5] # Thêm một phần tử vào cuối list my_list.append(6) print(&quot;List sau khi thêm phần tử mới:&quot;, my_list) # Xóa phần tử tại index 2 del my_list[2] print(&quot;List sau khi xóa phần tử tại index 2:&quot;, my_list) list1 = [1, 2, 3] list2 = [4, 5, 6] # Nối list2 vào list1 list1.extend(list2) print(&quot;List sau khi nối:&quot;, list1) (Optional) Sử dùng hàm có sẵn để: Đếm số lần xuất hiện của một giá trị trong list Sắp xếp list Đảo ngược thứ tự của list my_list = [5,5,3,2,3,1] # Đếm số lần xuất hiện của giá trị 3 trong list count_3 = __ print(&quot;Số lần xuất hiện của giá trị 3 trong list:&quot;, count_3) # Sắp xếp list my_list = __ print(&quot;List sau khi sắp xếp:&quot;, my_list) # Đảo ngược thứ tự của list my_list = __ print(&quot;List sau khi đảo ngược:&quot;, my_list) Lời giải my_list = [5,5,3,2,3,1] # Đếm số lần xuất hiện của một giá trị trong list count_3 = my_list.count(3) print(&quot;Số lần xuất hiện của giá trị 3 trong list:&quot;, count_3) # Sắp xếp list my_list.sort() print(&quot;List sau khi sắp xếp:&quot;, my_list) # Đảo ngược thứ tự của list my_list.reverse() print(&quot;List sau khi đảo ngược:&quot;, my_list) 2.4.4.2 Set Tạo một set chứa các môn học bạn học trong một kỳ học. In ra set đó. Kiểm tra kiểu dữ liệu của set vừa tạo Khởi tạo một biến với giá trị là tên một môn học khác. Thêm môn học mới vào set trên và in ra set sau khi thêm. # 1. # Tạo set subjects_set = # In ra set print(__) # Kiểm tra kiểu dữ liệu của set. &lt;class &#39;set&#39;&gt; print(__) # 2. #Khởi tạo biến với giá trị là môn học khác new_subject = __ # Thêm môn học trên vào set subjects_set và xóa một môn học bất kì subjects_set.__(__) subjects_set.__(__) # In ra set sau khi thêm print(&quot;Danh sách môn học sau khi thêm:&quot;, subjects_set) Lời giải # Bài 32 subjects_set = {&quot;Toán&quot;, &quot;Văn&quot;, &quot;Anh&quot;, &quot;Lý&quot;, &quot;Hóa&quot;} print(&quot;Danh sách môn học:&quot;, subjects_set) print(type(subjects_set)) # Bài 33 new_subject = &quot;Âm nhạc&quot; subjects_set.add(new_subject) subjects_set.remove(&quot;Văn&quot;) print(&quot;Danh sách môn học sau khi thêm:&quot;, subjects_set) Cho 2 set set1 và set2 1. Tìm phần tử chung của 2 set 2. Tạo một set gồm tất cả phần tử của 2 set Cho 2 set set5 và set6. Tìm những kí tự nằm trong set5 nhưng không nằm trong set6 set1 = {1, 2, 3, 4, 5} set2 = {3, 4, 5, 6, 7} #In ra phần tử chung intersection_result = __ print(f&quot;Phép giao của hai set: {intersection_result}&quot;) #In ra set gồm tất cả phần tử union_result = __ print(f&quot;Phép hợp của hai set: {union_result}&quot;) set5 = set(&quot;abcde&quot;) set6 = set(&quot;cdefg&quot;) #In ra kí tự nằm trong set5 mà không trong set6 difference_result = __ print(f&quot;Phép hiệu của hai set: {difference_result}&quot;) Lời giải # Bài 36 set1 = {1, 2, 3, 4, 5} set2 = {3, 4, 5, 6, 7} intersection_result = set1.intersection(set2) print(f&quot;Phép giao của hai set: {intersection_result}&quot;) # Bài 37 set3 = {1, 2, 3, 4, 5, 6} set4 = {4, 5, 6, 7, 8} union_result = set3.union(set4) print(f&quot;Phép hợp của hai set: {union_result}&quot;) # Bài 38 set5 = set(&quot;abcde&quot;) set6 = set(&quot;cdefg&quot;) difference_result = set5.difference(set6) print(f&quot;Phép hiệu của hai set: {difference_result}&quot;) 2.4.4.3 Tuple Tạo tuple subjects_tuple với 3 môn học Toan, Van, Anh Không khai báo lại 3 môn trên, tạo tuple mới new_subject_tuple với 3 môn học trong tuple subjects_tuple và thêm môn Ly # Bài 41 subjects_tuple = (__, __, __) number_of_elements = len(__) print(f&quot;Số lượng phần tử trong tuple là: {number_of_elements}&quot;) # Bài 42 new_subject_tuple = subjects_tuple + (__,) print(&quot;Tuple sau khi thêm môn học mới:&quot;, new_subject_tuple ) Lời giải # Bài 41 subjects_tuple = (&quot;Toán&quot;, &quot;Văn&quot;, &quot;Anh&quot;) number_of_elements = len(subjects_tuple) print(f&quot;Số lượng phần tử trong tuple là: {number_of_elements}&quot;) # Bài 42 new_subject_tuple = subjects_tuple + (&quot;Lý&quot;,) print(&quot;Tuple sau khi thêm môn học mới:&quot;, new_subject_tuple ) 2.4.4.4 Dictionary Một sinh viên có thông tin như sau tên là Nguyễn Văn A, tuổi 20, điểm 8.5 Tạo một dictionary chứa thông tin về một sinh viên với các thông tin như “tên”, “tuổi”, “điểm”. In ra tên của sinh viên đó. Thêm số điện thoại 0123456789 vào thông tin Xóa thông tin về tuổi Thay đổi điểm thành 9.0 # 1 student_info = {__:__, __:__, __:__} # 2 student_name = student_info[__] print(f&quot;Tên của sinh viên là: {student_name}&quot;) #3. Thêm số điện thoại 0123456789 student_info[__] = __ print(&quot;Dictionary sau khi thêm số điện thoại:&quot;, student_info) #4. Xóa thông tin về tuổi del __[__] print(&quot;Dictionary sau khi xóa thông tin tuổi:&quot;, student_info) #5. Thay đổi điểm thành 9.0 student_info[__] = __ print(&quot;Dictionary sau khi thay đổi điểm:&quot;, student_info) Lời giải #1 student_info = {&quot;tên&quot;: &quot;Nguyễn Văn A&quot;, &quot;tuổi&quot;: 20, &quot;điểm&quot;: 8.5} #2 student_name = student_info[&quot;tên&quot;] print(f&quot;Tên của sinh viên là: {student_name}&quot;) #3 student_info[&quot;số điện thoại&quot;] = &quot;0123456789&quot; print(&quot;Dictionary sau khi thêm số điện thoại:&quot;, student_info) #4 del student_info[&quot;tuổi&quot;] print(&quot;Dictionary sau khi xóa thông tin tuổi:&quot;, student_info) #5 student_info[&quot;điểm&quot;] = 9.0 print(&quot;Dictionary sau khi thay đổi điểm:&quot;, student_info) 2.4.4.5 Chuỗi Tạo một chuỗi chứa tên John và in ra ký tự đầu tiên và cuối cùng trong chuỗi. 2.5 Bài tập 2.5.1 TONG_N_SO Vết hàm tính Tổng từ 1 đến số nguyên dương n cho trước def sum_1_to_n(n): .. return __ Test case: Ví dụ Kết quả sum_1_to_n(5) 15 sum_1_to_n(100) 5050 Lưu ý: không sử dụng công thức n*(n+1)//2 Lời giải def sum_1_to_n(n): answer = 0 for i in range(1, n+1): answer += i return answer 2.5.2 GIAI_THUA Viết hàm tìm Giai thừa của một số nguyên dương n theo công thức \\(n! = 1 \\times 2 \\times 3 \\times .. \\times (n-1) \\times n\\) def findGT(n): ... return _ Test case: Ví dụ Kết quả findGT(5) 120 findGT(7) 5040 Lưu ý: không sử dụng hàm cho sẵn math.factorial(n) Lời giải def findGT(n): answer = 1 for i in range(1, n+1): answer *= i return answer 2.5.3 CHIA_CHO_5 Mô tả Viết hàm tìm tất cả các số chia hết cho 5 nhưng không chia hết cho 15 nằm trong đoạn từ [a, b] với điều kiện a&gt;0, b&gt;0. Kết quả trả về là một danh sách def find(a, b): for i in range(__, __): if __: .. .. .. return _ Test case Ví dụ Kết quả find(1, 40) [5, 10, 20, 25, 35, 40] find(10, 100) [10, 20, 25, 35, 40, 50, 55, 65, 70, 80, 85, 95, 100] Lời giải def find(a, b): answer = [] for i in range(a, b + 1): if (i % 5 == 0) &amp; (i % 3 != 0): answer.append(i) return answer 2.5.4 PARSE_STRING_01 Mô tả Viết một hàm nhận đầu vào là một danh sách các số nguyên dưới dạng chuỗi và đầu ra là một danh sách def parseString(l): .. .. return Test case Ví dụ Kết quả parseString(\"[1, 2, 3, 4, 5]\") [1, 2, 3, 4, 5] parseString(\"[-1, -2]\") [-1, -2] parseString(\"[0]\") [0] Lời giải def parseString(l): items = l.split(&#39;,&#39;) answer = [] for i in range(len(items)): item = items[i].replace(&#39;[&#39;,&#39;&#39;).replace(&#39;]&#39;,&#39;&#39;).strip() item = int(item) answer.append(item) return answer 2.5.5 ATM Giả sử bạn đang code thuật toán cho máy ATM với một số tiền vô hạn. ATM có các đồng tiền với mệnh giá 50 20 10 5 2 1. Yêu cầu viết thuật toán nhận lệnh số tiền money và trả ra số tờ tiền ít nhất def ATM(money): l = [50, 20, 10, 5, 2, 1] .. .. return __ Test case Ví dụ Kết quả ATM(100) 2 Giải thích: 100 chỉ cần 2 tờ mệnh giá 50” ATM(121) 4 Giải thích: 121 = 50 * 2 + 20 * 1 + 1 * 1 Lời giải def ATM(money): l = [50, 20, 10, 5, 2, 1] answer = [0, 0, 0, 0, 0, 0] for i in range(len(l)): answer[i] = money // l[i] money = money % l[i] return sum(answer) 2.5.6 UCLN Viết hàm tìm Ước chung lớn nhất của hai số nguyên dương a, b def findUCLN(a, b): .. return __ Test case: Ví dụ Kết quả findUCLN(50, 20) 10 findUCLN(60, 520) 20 Lưu ý: không sử dụng hàm cho sẵn math.gcd(a, b) Lời giải def findUCLN(a, b): while b != 0: temp = b b = a % b a = temp # a, b = b, a % b return a 2.5.7 BCNN Viết hàm tìm Bội chung nhỏ nhất của hai số nguyên dương a, b def findBCNN(a, b): .. .. return __ Test case: Ví dụ Kết quả findBCNN(8, 6) 24 findBCNN(30, 520) 1560 Lưu ý: không sử dụng hàm cho sẵn math.lcm(a, b) Lời giải def findBCNN(a, b): answer = a * b // findUCLN(a, b) return answer 2.5.8 RUT_GON_DA_THUC_01 Viết một hàm nhận một đa thức và trả ra đa thức rút gọn sắp xếp theo trình tự giảm dần của bậc. ^ là kí hiệu cho dấu lũy thừa Ràng buộc: Các hệ số không âm, giữa các hệ số và x sẽ là dấu * đại diện cho dấu nhân phép tính giữa các đơn thức là phép + def rut_gon_da_thuc(dathuc): return __ Test case Ví dụ Kết quả rut_gon_da_thuc(\"3*x^2 + 2*x + 2*x^2\") “5*x^2 + 2*x” rut_gon_da_thuc(\"2*x + 2*x^2 + 5*x + 3\") “2*x^2 + 7*x + 3” rut_gon_da_thuc(\"3*x^5 + 2*x + 2*x^5 + 4*x\") “5*x^5 + 6*x” Lời giải def rut_gon_da_thuc(da_thuc): # Tách biệt các hạng tử hts = da_thuc.split(&quot; + &quot;) print(hts) # Tạo một từ điển để lưu trữ số lượng và hạng tử thong_ke = {} for ht in hts: print(ht) if &#39;*&#39; not in ht: he_so, bac = ht, 0 else: he_so, bac = ht.split(&quot;*x&quot;) print(he_so, bac) if &quot;^&quot; in bac: bac = int(bac.split(&quot;^&quot;)[1]) else: bac = 1 # Cập nhật số lượng và hạng tử trong từ điển if bac in thong_ke: thong_ke[bac] += int(he_so) else: thong_ke[bac] = int(he_so) print(thong_ke) # Tạo đa thức đã rút gọn da_thuc_rut_gon = &quot;&quot; for bac, he_so in sorted(thong_ke.items(), reverse=True): if he_so != 0: if bac &gt;=2 : da_thuc_rut_gon += f&quot;{he_so}*x^{bac} + &quot; elif bac == 1: da_thuc_rut_gon += f&quot;{he_so}*x + &quot; else: da_thuc_rut_gon += str(he_so) # Loại bỏ dấu + cuối cùng da_thuc_rut_gon = da_thuc_rut_gon.rstrip(&quot; + &quot;) return da_thuc_rut_gon "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
